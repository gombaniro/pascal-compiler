package org.internals.frontend;

import org.internals.intermediate.ICode;
import org.internals.intermediate.SymbolTable;

/**
 * <h1>Parser</h1>
 * <p>A language-independent framework class. This abstract parser class
 * will be implemented by language-specific subclass.</p>
 */
public abstract class Parser {
    protected static SymbolTable symTab;  // generated by symbol table

    static {
        symTab = null;
    }
    protected Scanner scanner;             // scanner used with this parser
    protected ICode iCode;                  //intermediate code generated by this parser

    /**
     * Constructor.
     * @param scanner the scanner to be used with this parser
     */
    public Parser(Scanner scanner) {
        this.scanner = scanner;
        this.iCode = null;
    }

    /**
     * Parse a source program and generate the intermediate code and the
     * symbol table. To be implemented by a language-specific parser
     * @throws Exception
     */
    public abstract void parse() throws Exception;

    /**
     * Return the number of syntax errors found by the parser.
     * To be implemented by a language-specific parser subclass.
     * @return the error count.
     */
    public abstract int getErrorCount();

    /**
     * Call the scanner's currentToken() method
     * @return the Current token
     */
    public Token currentToken() {
        return scanner.currentToken();
    }

    /**
     * Call the scanner's nextToken() method
     * @return the next token
     * @throws Exception if an error occurred.
     */
    public Token nextToken() throws Exception {
        return scanner.nextToken();
    }
}
