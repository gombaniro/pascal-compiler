package org.internals.backend;

import org.internals.intermediate.ICode;
import org.internals.intermediate.SymbolTable;
import org.internals.message.Message;
import org.internals.message.MessageHandler;
import org.internals.message.MessageListener;
import org.internals.message.MessageProducer;

/**
 * <h1>Backend</h1>
 *
 * <p>The framework class that represents the back end component.</p>
 */
public abstract class Backend implements MessageProducer {

    // Message handler delegate.
    protected  static MessageHandler messageHandler;

    static {
        messageHandler = new MessageHandler();
    }
    protected SymbolTable symTab;  // symbol table
    protected ICode iCode;          // intermediate code

    /**
     * Process the intermediate code and the symbol table generated by the
     * parser. To be implemented by a compiler or an interpreter subclass.
     * @param iCode the intermediate code.
     * @param symTab the symbol table.
     * @throws Exception if an error occurred.
     */
    public abstract void process(ICode iCode, SymbolTable symTab) throws Exception;
    @Override
    public void addMessageListener(MessageListener listener) {
        messageHandler.addMessageListener(listener);
    }

    @Override
    public void removeMessageListener(MessageListener listener) {
          messageHandler.removeMessageListener(listener);
    }

    @Override
    public void sendMessage(Message message) {
          messageHandler.sendMessage(message);
    }
}
